// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Dima\Desktop\app_messenger\Message\internal\repository\message.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	entities "internal/entities"
	reflect "reflect"
)

// MockMessageRepository is a mock of MessageRepository interface
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method
func (m *MockMessageRepository) CreateMessage(message *entities.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMessage indicates an expected call of CreateMessage
func (mr *MockMessageRepositoryMockRecorder) CreateMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockMessageRepository)(nil).CreateMessage), message)
}

// SendMessage mocks base method
func (m *MockMessageRepository) SendMessage(message *entities.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockMessageRepositoryMockRecorder) SendMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageRepository)(nil).SendMessage), message)
}

// ReceiveMessage mocks base method
func (m *MockMessageRepository) ReceiveMessage(id int) (*entities.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveMessage", id)
	ret0, _ := ret[0].(*entities.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveMessage indicates an expected call of ReceiveMessage
func (mr *MockMessageRepositoryMockRecorder) ReceiveMessage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessage", reflect.TypeOf((*MockMessageRepository)(nil).ReceiveMessage), id)
}

// DeleteMessage mocks base method
func (m *MockMessageRepository) DeleteMessage(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage
func (mr *MockMessageRepositoryMockRecorder) DeleteMessage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessageRepository)(nil).DeleteMessage), id)
}

// GetMessages mocks base method
func (m *MockMessageRepository) GetMessages(channelID, offset, limit int) ([]*entities.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", channelID, offset, limit)
	ret0, _ := ret[0].([]*entities.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages
func (mr *MockMessageRepositoryMockRecorder) GetMessages(channelID, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockMessageRepository)(nil).GetMessages), channelID, offset, limit)
}
